{"version":3,"sources":["generateParty.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["splitInput","input","numToken","vocab","length","possible","Array","from","_loop","j","_loop2","i","n","_","k","some","has","slice","result","r","l","unshift","generateParty","minTokenLength","useOnlyPrefix","maxExamples","numPokemon","toKatakana","pokeNames","minLength","onlyPrefix","_step","_iterator","_createForOfIteratorHelper","s","done","pokeName","value","maxLeft","push","err","e","f","createVocab","pokemon","split","Set","Object","keys","map","x","Result","_ref","React","createElement","ls","idx","_result$idx","_slicedToArray","examples","key","JSON","stringify","Fragment","App","_useState","useState","_useState2","partyName","setPartyName","_useState3","_useState4","setUseOnlyPrefix","_useState5","_useState6","setResult","className","type","onChange","target","checked","onClick","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d1ca1bd6.chunk.js","sourcesContent":["import pokemon from \"./pokemon.json\";\nimport { toKatakana } from 'wanakana';\n\nfunction range(n: number): Array<number> {\n  return Array.from({ length: n }, (_, k) => k);\n}\n\nexport function shouldExclude(slice: string): boolean {\n  // TODO: Implement this\n  return false;\n}\n\nexport function createVocab(\n  pokeNames: Array<string>,\n  minLength: number,\n  onlyPrefix: boolean\n): Record<string, Array<string>> {\n  const vocab: Record<string, Array<string>> = {};\n  for (const pokeName of pokeNames) {\n    const maxLeft = onlyPrefix ? 0 : pokeName.length;\n    for (let i = 0; i <= maxLeft; i++) {\n      for (let j = i + minLength; j <= pokeName.length; j++) {\n        const slice = pokeName.slice(i, j);\n        if (shouldExclude(slice)) {\n          continue;\n        }\n        if (!(slice in vocab)) {\n          vocab[slice] = [];\n        }\n        vocab[slice].push(pokeName);\n      }\n    }\n  }\n  return vocab;\n}\n\nexport function splitInput(\n  input: string,\n  numToken: number,\n  vocab: Set<string>\n): Array<string> | null {\n  const length = input.length;\n\n  // posible[i][j]: can construct input[:i] using j elems in vocab\n  const possible: Array<Array<boolean>> = Array.from(\n    { length: length + 1 },\n    () => Array.from({ length: numToken + 1 }, () => false)\n  );\n  possible[0][0] = true;\n  for (let j = 1; j <= numToken; j++) {\n    for (let i = 0; i <= input.length; i++) {\n      possible[i][j] = range(i).some(\n        (k) => possible[k][j - 1] && vocab.has(input.slice(k, i))\n      );\n    }\n  }\n\n  if (!possible[length][numToken]) {\n    return null;\n  }\n\n  // Reconstruct a split\n  // TODO: Make it return multiple splits\n  let result: Array<string> = [];\n  let r = length;\n  for (let j = numToken - 1; j >= 0; j--) {\n    for (let l = r - 1; l >= 0; l--) {\n      if (possible[l][j]) {\n        result.unshift(input.slice(l, r));\n        r = l;\n        break;\n      }\n    }\n  }\n  return result;\n}\n\nexport function generateParty(\n  input: string,\n  minTokenLength: number,\n  useOnlyPrefix: boolean,\n  maxExamples: number,\n  numPokemon: number\n): Array<[string, Array<string>]> | null {\n  input = toKatakana(input);\n  const vocab = createVocab(pokemon, minTokenLength, useOnlyPrefix);\n  const split = splitInput(input, numPokemon, new Set(Object.keys(vocab)));\n  if (split === null) {\n    return null;\n  }\n  return split.map((x) => [x, vocab[x].slice(0, maxExamples)]);\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { generateParty } from \"./generateParty\";\n\ninterface ResultProp {\n  result: Array<[string, Array<string>]> | null;\n}\n\nconst Result = ({ result }: ResultProp) => {\n  if (result === null) {\n    return <div>生成できませんでした</div>;\n  }\n  let ls = [];\n  for (const idx in result) {\n    const [split, examples] = result[idx];\n    ls.push(\n      <div key={idx}>\n        {split} =&gt; {JSON.stringify(examples)}{\" \"}\n      </div>\n    );\n  }\n  return <>{ls}</>;\n};\n\nfunction App() {\n  const [partyName, setPartyName] = useState(\"\");\n  const [useOnlyPrefix, setUseOnlyPrefix] = useState(false);\n  const [result, setResult] = useState<Array<[string, Array<string>]> | null>([]);\n  const handleClick = () => {\n    setResult(generateParty(partyName, 1, useOnlyPrefix, 3, 6));\n  };\n\n  return (\n    <div className=\"App\">\n      <label>\n        パーティー名:{\" \"}\n        <input\n          type=\"text\"\n          value={partyName}\n          onChange={(e) => setPartyName(e.target.value)}\n        />\n      </label>\n      <hr />\n      <label>\n        接頭辞のみを使う:{\" \"}\n        <input\n          type=\"checkbox\"\n          checked={useOnlyPrefix}\n          onChange={(e) => setUseOnlyPrefix(e.target.checked)}\n        />\n      </label>\n      <hr />\n      <button onClick={handleClick}>生成</button>\n      <hr />\n      <Result result={result} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}